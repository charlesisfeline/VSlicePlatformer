import Main;

import flixel.FlxG;
import flixel.FlxObject;
import flixel.FlxSprite;
import flixel.addons.transition.FlxTransitionableState;
import flixel.graphics.FlxGraphic;
import flixel.text.FlxText;
import flixel.tile.FlxTilemap;

import funkin.Conductor;
import funkin.Paths;
import funkin.audio.FunkinSound;
import funkin.modding.base.ScriptedFlxSprite;
import funkin.modding.base.ScriptedMusicBeatState;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.ui.MusicBeatState;
import funkin.ui.mainmenu.MainMenuState;
import funkin.util.ReflectUtil;

class PlatformerState extends ScriptedMusicBeatState
{
    var justDied:Bool = false;

    var player:FlxSprite;

    // var ground:FlxSprite;

    public function new()
    {
        super();
    }

    public function getCsv(path:String)
    {
        return "mods/platf/" + path + ".csv";
    }

    public function create():Void
    {
        super.create();

        FlxG.mouse.visible = true;

        FlxTransitionableState.skipNextTransIn = true;
        FlxTransitionableState.skipNextTransOut = true;

        FunkinSound.playMusic("chartEditorLoop",
            {
                overrideExisting: true,
                restartTrack: false
            });

        FlxG.cameras.bgColor = 0x2A1D1D;

        trace("hi");

        level = new FlxTilemap();
		level.loadMapFromCSV(getCsv("data/csv/level"), FlxGraphic.fromClass(GraphicAuto), 0, 0, AUTO);
		add(level);

        player = new FlxSprite().loadGraphic(Paths.image("platformer/playerSprite"));
        player.screenCenter();
        player.maxVelocity.set(80, 200);
		player.acceleration.y = 200;
		player.drag.x = player.maxVelocity.x * 4;
        add(player);

        // thx cyn
        ModuleHandler.getModule("Reloader").scriptGet("reload").set("state", function():Void
        {
            FlxG.switchState(ScriptedMusicBeatState.init("PlatformerState"));
        });
    }

    function goBack()
    {
        trace("back");
        FlxG.switchState(() -> new MainMenuState());
    }

    override public function update(elapsed:Float)
    {
        if (player != null)
        {
            player.acceleration.x = 0;

        // control shits
        if (FlxG.keys.anyPressed([LEFT, A]))
			player.acceleration.x = -player.maxVelocity.x * 4;

		if (FlxG.keys.anyPressed([RIGHT, D]))
			player.acceleration.x = player.maxVelocity.x * 4;

		if (FlxG.keys.anyJustPressed([SPACE, UP, W]) && player.isTouching(FLOOR))
			player.velocity.y = -player.maxVelocity.y / 2;
    }

        if (controls.BACK) goBack();
        //

        super.update(elapsed);

        if (player != null)
        {
        FlxG.collide(level, player);

        if (player.y > FlxG.height)
		{
			justDied = true;
			goBack(); // lol
		}
    }
    }

    function win():Void
	{
        trace("congrats you won!");
		if (player != null) player.kill();
	}
}
