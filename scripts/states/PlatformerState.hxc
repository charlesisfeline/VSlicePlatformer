import Main;

import flixel.FlxCamera;
import flixel.FlxG;
import flixel.FlxObject;
import flixel.FlxSprite;
import flixel.addons.transition.FlxTransitionableState;
import flixel.graphics.FlxGraphic;
import flixel.text.FlxText;
import flixel.tile.FlxTilemap;
import flixel.util.FlxTimer;

import funkin.Conductor;
import funkin.Paths;
import funkin.audio.FunkinSound;
import funkin.modding.base.ScriptedFlxSprite;
import funkin.modding.base.ScriptedFunkinSprite;
import funkin.modding.base.ScriptedMusicBeatState;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.ui.MusicBeatState;
import funkin.ui.mainmenu.MainMenuState;
import funkin.util.ReflectUtil;

import openfl.utils.Assets;

class PlatformerState extends ScriptedMusicBeatState
{
    var showHitboxes:Bool = false;
    var justDied:Bool = false;
    public var deaths:Int = 0;

    public var player = ScriptedFunkinSprite.init("VPlayer");
    public var level:FlxTilemap;

    var camGame:FlxCamera;

    public function new() { super(); }

    public function getCsv(path:String) { return "mods/platf/" + path + ".csv"; }

    public function create():Void
    {
        FlxG.mouse.visible = true;

        FlxTransitionableState.skipNextTransIn = true;
        FlxTransitionableState.skipNextTransOut = true;

        FunkinSound.playMusic("chartEditorLoop", {overrideExisting: true, restartTrack: false});

        camGame = new FlxCamera();
        FlxG.cameras.bgColor = 0x2A1D1D;

        FlxG.cameras.reset(camGame);

		FlxCamera.defaultCameras = [camGame];

        trace("hi");

        level = new FlxTilemap();
		level.loadMapFromCSV(getCsv("data/csv/level"), Paths.image("platformer/tiles"), 16, 16);
        add(level);

        player.screenCenter(0x01);
        add(player);

        super.create();

        // thx cyn
        ModuleHandler.getModule("Reloader").scriptGet("reload").set("state", function():Void
        {
            FlxG.switchState(ScriptedMusicBeatState.init("PlatformerState"));
        });
    }

    function goBack() { trace("back"); FlxG.switchState(() -> new MainMenuState()); }

    override public function update(elapsed:Float)
    {
        if (player != null)
        {
            player.acceleration.x = 0;

            // control shits
            if (FlxG.keys.pressed.LEFT)
            {
                player.flipX = true;
                player.acceleration.x = -player.maxVelocity.x * 4;
            }
		    if (FlxG.keys.pressed.RIGHT)
            {
                player.flipX = false;
                player.acceleration.x = player.maxVelocity.x * 4;
            }
            if ((FlxG.keys.justPressed.UP || FlxG.keys.justPressed.SPACE)) jump();
        }

        if (FlxG.keys.justPressed.H) showHitboxes = !showHitboxes;

        FlxG.debugger.drawDebug = showHitboxes;

        if (controls.BACK) goBack();
        //

        super.update(elapsed);

        if (player != null)
        {
          FlxG.collide(level, player);

          if (player.y > FlxG.height) lose();
        }
    }

    override public function destroy() { super.destroy(); }

    function jump() { FlxG.sound.play(Paths.sound('jump')); player.velocity.y = -player.maxVelocity.y / 2; }

    function lose()
	{
        justDied = true;
		goBack(); // lol
    }

    function win() { trace("congrats you won!"); if (player != null) player.kill(); }
}
